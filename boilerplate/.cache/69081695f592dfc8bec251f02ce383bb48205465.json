{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/alexandesigner/Documents/projects/lets/boilerplate/src/imports/ui/pages/Admin/Documents/DocumentsNew.vue","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions",["flow",{}],"nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}]],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"sourceFileName":"/Users/alexandesigner/Documents/projects/lets/boilerplate/src/imports/ui/pages/Admin/Documents/DocumentsNew.vue","filename":"/Users/alexandesigner/Documents/projects/lets/boilerplate/src/imports/ui/pages/Admin/Documents/DocumentsNew.vue","passPerPreset":false,"envName":"development","cwd":"/Users/alexandesigner/Documents/projects/lets/boilerplate","root":"/Users/alexandesigner/Documents/projects/lets/boilerplate","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.7.4","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"TSModuleBlock":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/alexandesigner/Documents/projects/lets/boilerplate/src/imports/ui/pages/Admin/Documents/DocumentsNew.vue","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"/Users/alexandesigner/Documents/projects/lets/boilerplate/src/imports/ui/pages/Admin/Documents/DocumentsNew.vue"}},"code":"var AdminSidebar;\nmodule.link(\"../../../components/Admin/AdminSidebar\", {\n  \"default\": function (v) {\n    AdminSidebar = v;\n  }\n}, 0);\nvar AdminContent;\nmodule.link(\"../../../components/Admin/AdminContent\", {\n  \"default\": function (v) {\n    AdminContent = v;\n  }\n}, 1);\nvar BackButton;\nmodule.link(\"../../../components/BackButton/BackButton\", {\n  \"default\": function (v) {\n    BackButton = v;\n  }\n}, 2);\nvar Images;\nmodule.link(\"../../../../api/Images/images\", {\n  \"default\": function (v) {\n    Images = v;\n  }\n}, 3);\nmodule.exportDefault({\n  name: 'admin-documents-new',\n  data: function () {\n    return {\n      imageUrl: null,\n      imageFileUpload: '',\n      image: [],\n      newDocument: {\n        title: '',\n        subtitle: '',\n        image: {\n          name: '',\n          type: '',\n          extension: '',\n          path: '',\n          imageId: ''\n        }\n      },\n      rules: {\n        title: [{\n          required: true,\n          message: 'Please input title',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  mounted: function () {\n    $('#DocNew').froalaEditor({\n      editorClass: 'TextInputEditor',\n      height: 380,\n      placeholderText: 'Start typing something...',\n      toolbarButtons: ['bold', 'italic', 'underline', 'insertLink', 'insertImage', 'embedly', 'formatBlock', 'quote', 'align', 'formatOL', 'formatUL', 'insertHR', 'html'],\n      fileUploadParam: 'file_name',\n      imageMaxSize: 5 * 1024 * 1024,\n      imageAllowedTypes: ['jpeg', 'jpg', 'png']\n    }).on('froalaEditor.image.beforeUpload', function (e, editor, files) {\n      if (files.length) {\n        var reader = new FileReader();\n\n        reader.onload = function (e) {\n          var result = e.target.result;\n          editor.image.insert(result, null, null, editor.image.get());\n        };\n\n        reader.readAsDataURL(files[0]);\n      }\n\n      editor.popups.hideAll();\n      return false;\n    });\n  },\n  computed: {\n    baseUrl: function () {\n      return Meteor.settings.public.BASE_URL;\n    }\n  },\n  methods: {\n    // Form submit\n    handleSubmitForm: function (formName) {\n      var self = this;\n      self.$refs[formName].validate(function (valid) {\n        try {\n          if (valid) {\n            var dataForm = self.newDocument;\n            var user = self.users[0]; // Create upload instance\n\n            if (self.imageUrl !== null) {\n              var uploadInstance = Images.insert({\n                file: self.imageFileUpload.raw,\n                // Get the raw file\n                streams: 'dynamic',\n                chunkSize: 'dynamic',\n                fileName: self.imageFileUpload.name\n              }, false); // When upload status 'end' \n\n              uploadInstance.on('end', function (error, fileObj) {\n                // Check image upload\n                if (error) {\n                  console.log('Error during upload: ' + error.reason);\n                } else {\n                  // Get image path\n                  var imagePath = Images.link(fileObj);\n                  self.image = {\n                    name: fileObj.name,\n                    type: 'document',\n                    extension: fileObj.extension,\n                    path: imagePath,\n                    imageId: fileObj._id\n                  };\n                  console.log('File \"' + fileObj.name + '\" successfully uploaded');\n                } // Send insert data\n\n\n                Meteor.callPromise('Documents.methods.insert', {\n                  createdAt: new Date(),\n                  owner: user._id,\n                  title: dataForm.title,\n                  subtitle: dataForm.subtitle,\n                  body: document.querySelector('[name=\"documentBody\"]').value || '',\n                  image: {\n                    name: self.image.name,\n                    type: self.image.type,\n                    extension: self.image.extension,\n                    path: self.image.path,\n                    imageId: self.image.imageId\n                  }\n                });\n                self.$message({\n                  type: 'info',\n                  message: \"Document created with success!\"\n                });\n                self.$refs[formName].resetFields();\n                self.$router.push({\n                  name: 'admin-documents'\n                });\n              });\n              uploadInstance.start();\n            } else {\n              Meteor.callPromise('Documents.methods.insert', {\n                createdAt: new Date(),\n                owner: user._id,\n                title: dataForm.title,\n                subtitle: dataForm.subtitle,\n                body: document.querySelector('[name=\"documentBody\"]').value || '',\n                image: {\n                  name: '',\n                  type: '',\n                  extension: '',\n                  path: '',\n                  imageId: ''\n                }\n              });\n              self.$message({\n                type: 'info',\n                message: \"Document created with success!\"\n              });\n              self.$refs[formName].resetFields();\n              self.$router.push({\n                name: 'admin-documents'\n              });\n            }\n          }\n        } catch (error) {\n          self.$message({\n            type: 'error',\n            message: error.error\n          });\n        }\n      });\n    },\n    handleImageSuccess: function (res, file) {\n      this.imageFileUpload = file;\n      this.imageUrl = URL.createObjectURL(file.raw);\n    },\n    beforeImageUpload: function (file) {\n      var isJPG = file.type === 'image/jpeg';\n      var isPNG = file.type === 'image/png';\n      var isLt2M = file.size / 1024 / 1024 < 2;\n\n      if (!isJPG && !isPNG) {\n        this.$message.error('Image must be JPG or PNG format!');\n      }\n\n      if (!isLt2M) {\n        this.$message.error('Image size can not exceed 2MB!');\n      }\n\n      return isJPG || isPNG && isLt2M;\n    }\n  },\n  meteor: {\n    $subscribe: {\n      'users': []\n    },\n    users: function () {\n      return Meteor.users.find({});\n    }\n  },\n  components: {\n    AdminSidebar: AdminSidebar,\n    AdminContent: AdminContent,\n    BackButton: BackButton\n  }\n});","map":{"version":3,"sources":["/Users/alexandesigner/Documents/projects/lets/boilerplate/src/imports/ui/pages/Admin/Documents/DocumentsNew.vue"],"names":["AdminSidebar","module","link","v","AdminContent","BackButton","Images","exportDefault","name","data","imageUrl","imageFileUpload","image","newDocument","title","subtitle","type","extension","path","imageId","rules","required","message","trigger","mounted","$","froalaEditor","editorClass","height","placeholderText","toolbarButtons","fileUploadParam","imageMaxSize","imageAllowedTypes","on","e","editor","files","length","reader","FileReader","onload","result","target","insert","get","readAsDataURL","popups","hideAll","computed","baseUrl","Meteor","settings","public","BASE_URL","methods","handleSubmitForm","formName","self","$refs","validate","valid","dataForm","user","users","uploadInstance","file","raw","streams","chunkSize","fileName","error","fileObj","console","log","reason","imagePath","_id","callPromise","createdAt","Date","owner","body","document","querySelector","value","$message","resetFields","$router","push","start","handleImageSuccess","res","URL","createObjectURL","beforeImageUpload","isJPG","isPNG","isLt2M","size","meteor","$subscribe","find","components"],"mappings":"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","sourcesContent":["\n\n// Components\nimport AdminSidebar from '../../../components/Admin/AdminSidebar';\nimport AdminContent from '../../../components/Admin/AdminContent';\nimport BackButton from '../../../components/BackButton/BackButton';\n\n// Collections\nimport Images from '../../../../api/Images/images'\n\nexport default {\n  name: 'admin-documents-new',\n  data: () => ({\n    imageUrl: null,\n    imageFileUpload: '',\n    image: [],\n    newDocument: {\n      title: '',\n      subtitle: '',\n      image: {\n        name: '',\n        type: '',\n        extension: '',\n        path: '',\n        imageId: ''\n      }\n    },\n    rules: {\n      title: [\n        { required: true, message: 'Please input title', trigger: 'blur' },\n      ]\n    },\n  }),\n  mounted () {\n    $('#DocNew').froalaEditor({\n      editorClass: 'TextInputEditor',\n      height: 380,\n      placeholderText: 'Start typing something...',\n      toolbarButtons: [\n        'bold',\n        'italic',\n        'underline',\n        'insertLink',\n        'insertImage',\n        'embedly',\n        'formatBlock',\n        'quote',\n        'align',\n        'formatOL',\n        'formatUL',\n        'insertHR',\n        'html'\n      ],\n      fileUploadParam: 'file_name',\n      imageMaxSize: 5 * 1024 * 1024,\n      imageAllowedTypes: ['jpeg', 'jpg', 'png']\n    }).on('froalaEditor.image.beforeUpload', function (e, editor, files) {\n      if (files.length) {\n        let reader = new FileReader()\n        reader.onload = function (e) {\n          let result = e.target.result\n          editor.image.insert(result, null, null, editor.image.get())\n        }\n        reader.readAsDataURL(files[0])\n      }\n      editor.popups.hideAll()\n      return false\n    });\n  },\n  computed: {\n    baseUrl () {\n      return Meteor.settings.public.BASE_URL\n    }\n  },\n  methods: {\n    // Form submit\n    handleSubmitForm (formName) {\n\n      let self = this\n\n      self.$refs[formName].validate((valid) => {\n        try {\n          if (valid) {\n\n            let dataForm = self.newDocument\n            let user = self.users[0]\n\n            // Create upload instance\n            if (self.imageUrl !== null) {\n              let uploadInstance = Images.insert({\n                file: self.imageFileUpload.raw, // Get the raw file\n                streams: 'dynamic',\n                chunkSize: 'dynamic',\n                fileName: self.imageFileUpload.name\n              }, false)\n\n              // When upload status 'end' \n              uploadInstance.on('end', function(error, fileObj) {\n\n                // Check image upload\n                if (error) {\n                  console.log('Error during upload: ' + error.reason)\n                } else {\n                  // Get image path\n                  let imagePath = Images.link(fileObj)\n                  self.image = {\n                    name: fileObj.name,\n                    type: 'document',\n                    extension: fileObj.extension,\n                    path: imagePath,\n                    imageId: fileObj._id\n                  }\n                  console.log('File \"' + fileObj.name + '\" successfully uploaded')\n                }\n\n                // Send insert data\n                Meteor.callPromise('Documents.methods.insert', {\n                  createdAt: new Date(),\n                  owner: user._id,\n                  title: dataForm.title,\n                  subtitle: dataForm.subtitle,\n                  body: document.querySelector('[name=\"documentBody\"]').value || '',\n                  image: {\n                    name: self.image.name,\n                    type: self.image.type,\n                    extension: self.image.extension,\n                    path: self.image.path,\n                    imageId: self.image.imageId\n                  }\n                })\n                self.$message({\n                  type: 'info',\n                  message: `Document created with success!`\n                })\n                self.$refs[formName].resetFields()\n                self.$router.push({ name: 'admin-documents' })\n                \n              })\n\n              uploadInstance.start()\n            } else {\n              Meteor.callPromise('Documents.methods.insert', {\n                createdAt: new Date(),\n                owner: user._id,\n                title: dataForm.title,\n                subtitle: dataForm.subtitle,\n                body: document.querySelector('[name=\"documentBody\"]').value || '',\n                image: {\n                  name: '',\n                  type: '',\n                  extension: '',\n                  path: '',\n                  imageId: ''\n                }\n              })\n              self.$message({\n                type: 'info',\n                message: `Document created with success!`\n              })\n              self.$refs[formName].resetFields()\n              self.$router.push({ name: 'admin-documents' })\n            }\n          }\n        } catch (error) {\n          self.$message({\n            type: 'error',\n            message: error.error\n          })\n        }\n      })\n    },\n    handleImageSuccess(res, file) {\n      this.imageFileUpload = file\n      this.imageUrl = URL.createObjectURL(file.raw)\n    },\n    beforeImageUpload(file) {\n      const isJPG = file.type === 'image/jpeg'\n      const isPNG = file.type === 'image/png'\n      const isLt2M = file.size / 1024 / 1024 < 2\n\n      if (!isJPG && !isPNG) {\n        this.$message.error('Image must be JPG or PNG format!')\n      }\n      if (!isLt2M) {\n        this.$message.error('Image size can not exceed 2MB!')\n      }\n      return isJPG || isPNG && isLt2M\n    }\n  },\n  meteor: {\n    $subscribe: {\n      'users': []\n    },\n    users() {\n      return Meteor.users.find({},)\n    },\n  },\n  components: {\n    AdminSidebar,\n    AdminContent,\n    BackButton\n  }\n}\n"]},"sourceType":"module","hash":"69081695f592dfc8bec251f02ce383bb48205465"}
