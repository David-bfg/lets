{"metadata":{},"options":{"compact":false,"sourceMaps":true,"ast":true,"babelrc":false,"configFile":false,"parserOpts":{"sourceType":"module","sourceFileName":"/Users/alexandesigner/Documents/projects/lets/boilerplate/src/imports/ui/pages/Admin/Documents/DocumentsEdit.vue","plugins":["*","flow","jsx","asyncGenerators","bigInt","classPrivateMethods","classPrivateProperties","classProperties","doExpressions","dynamicImport","exportDefaultFrom","exportExtensions","exportNamespaceFrom","functionBind","functionSent","importMeta","nullishCoalescingOperator","numericSeparator","objectRestSpread","optionalCatchBinding","optionalChaining",["pipelineOperator",{"proposal":"minimal"}],"throwExpressions",["flow",{}],"nullishCoalescingOperator","nullishCoalescingOperator","optionalChaining","optionalChaining","optionalCatchBinding","optionalCatchBinding","classProperties","classPrivateProperties","classPrivateMethods","classProperties","classPrivateProperties","asyncGenerators","asyncGenerators","objectRestSpread","objectRestSpread",["flow",{}]],"allowImportExportEverywhere":true,"allowReturnOutsideFunction":true,"allowUndeclaredExports":true,"strictMode":false},"sourceFileName":"/Users/alexandesigner/Documents/projects/lets/boilerplate/src/imports/ui/pages/Admin/Documents/DocumentsEdit.vue","filename":"/Users/alexandesigner/Documents/projects/lets/boilerplate/src/imports/ui/pages/Admin/Documents/DocumentsEdit.vue","passPerPreset":false,"envName":"development","cwd":"/Users/alexandesigner/Documents/projects/lets/boilerplate","root":"/Users/alexandesigner/Documents/projects/lets/boilerplate","plugins":[{"key":"base$0","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"base$0$0","visitor":{"Program":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true},"options":{"avoidModernSyntax":true,"enforceStrictMode":false,"dynamicImport":true}},{"key":"transform-runtime","visitor":{"CallExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"MemberExpression":{"enter":[null],"exit":[null]},"_exploded":true,"_verified":true,"Identifier":{"enter":[null]},"JSXIdentifier":{"enter":[null]}},"options":{"version":"7.7.4","helpers":true,"useESModules":false,"corejs":false}},{"key":"syntax-flow","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"syntax-nullish-coalescing-operator","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-nullish-coalescing-operator","visitor":{"_exploded":{},"_verified":{},"LogicalExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-chaining","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-chaining","visitor":{"_exploded":{},"_verified":{},"OptionalCallExpression":{"enter":[null]},"OptionalMemberExpression":{"enter":[null]}},"options":{}},{"key":"syntax-optional-catch-binding","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-optional-catch-binding","visitor":{"_exploded":{},"_verified":{},"CatchClause":{"enter":[null]}},"options":{}},{"key":"syntax-class-properties","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-class-properties","visitor":{"PrivateName":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]}},"options":{}},{"key":"syntax-async-generators","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-async-generator-functions","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]}},"options":{}},{"key":"syntax-object-rest-spread","visitor":{"_exploded":true,"_verified":true},"options":{}},{"key":"proposal-object-rest-spread","visitor":{"_exploded":{},"_verified":{},"VariableDeclarator":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"ArrayPattern":{"enter":[null]},"ObjectExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-arrow-functions","visitor":{"ArrowFunctionExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoped-functions","visitor":{"BlockStatement":{"enter":[null]},"SwitchCase":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-block-scoping","visitor":{"VariableDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"_exploded":true,"BlockStatement":{"enter":[null]},"SwitchStatement":{"enter":[null]},"Program":{"enter":[null]},"_verified":true,"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-classes","visitor":{"ExportDefaultDeclaration":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-computed-properties","visitor":{"ObjectExpression":{"exit":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-destructuring","visitor":{"ExportNamedDeclaration":{"enter":[null]},"CatchClause":{"enter":[null]},"AssignmentExpression":{"enter":[null]},"VariableDeclaration":{"enter":[null]},"_exploded":true,"_verified":true,"ForInStatement":{"enter":[null]},"ForOfStatement":{"enter":[null]}},"options":{}},{"key":"transform-for-of","visitor":{"ForOfStatement":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-literals","visitor":{"NumericLiteral":{"enter":[null]},"StringLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-object-super","visitor":{"ObjectExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-parameters","visitor":{"_exploded":true,"_verified":true,"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]}},"options":{}},{"key":"transform-shorthand-properties","visitor":{"ObjectMethod":{"enter":[null]},"ObjectProperty":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-spread","visitor":{"ArrayExpression":{"enter":[null]},"CallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-sticky-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-template-literals","visitor":{"TaggedTemplateExpression":{"enter":[null]},"TemplateLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{"loose":true}},{"key":"transform-typeof-symbol","visitor":{"UnaryExpression":{"enter":[null]},"_exploded":true,"_verified":true,"BlockStatement":{"enter":[null]},"CatchClause":{"enter":[null]},"DoWhileStatement":{"enter":[null]},"ForInStatement":{"enter":[null]},"ForStatement":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"Program":{"enter":[null]},"ObjectMethod":{"enter":[null]},"SwitchStatement":{"enter":[null]},"WhileStatement":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"ForOfStatement":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"TSModuleBlock":{"enter":[null]}},"options":{}},{"key":"transform-unicode-regex","visitor":{"RegExpLiteral":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-property-literals","visitor":{"ObjectProperty":{"exit":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"transform-flow-strip-types","visitor":{"_exploded":{},"_verified":{},"Program":{"enter":[null]},"ImportDeclaration":{"enter":[null,null]},"ClassProperty":{"enter":[null]},"ClassPrivateProperty":{"enter":[null]},"AssignmentPattern":{"enter":[null]},"TypeCastExpression":{"enter":[null,null]},"CallExpression":{"enter":[null]},"OptionalCallExpression":{"enter":[null]},"NewExpression":{"enter":[null]},"ImportSpecifier":{"enter":[null]},"ClassDeclaration":{"enter":[null]},"ClassExpression":{"enter":[null]},"FunctionDeclaration":{"enter":[null]},"FunctionExpression":{"enter":[null]},"ObjectMethod":{"enter":[null]},"ArrowFunctionExpression":{"enter":[null]},"ClassMethod":{"enter":[null]},"ClassPrivateMethod":{"enter":[null]},"AnyTypeAnnotation":{"enter":[null]},"ArrayTypeAnnotation":{"enter":[null]},"BooleanTypeAnnotation":{"enter":[null]},"BooleanLiteralTypeAnnotation":{"enter":[null]},"NullLiteralTypeAnnotation":{"enter":[null]},"ClassImplements":{"enter":[null]},"DeclareClass":{"enter":[null]},"DeclareFunction":{"enter":[null]},"DeclareInterface":{"enter":[null]},"DeclareModule":{"enter":[null]},"DeclareModuleExports":{"enter":[null]},"DeclareTypeAlias":{"enter":[null]},"DeclareOpaqueType":{"enter":[null]},"DeclareVariable":{"enter":[null]},"DeclareExportDeclaration":{"enter":[null]},"DeclareExportAllDeclaration":{"enter":[null]},"DeclaredPredicate":{"enter":[null]},"ExistsTypeAnnotation":{"enter":[null]},"FunctionTypeAnnotation":{"enter":[null]},"FunctionTypeParam":{"enter":[null]},"GenericTypeAnnotation":{"enter":[null]},"InferredPredicate":{"enter":[null]},"InterfaceExtends":{"enter":[null]},"InterfaceDeclaration":{"enter":[null]},"InterfaceTypeAnnotation":{"enter":[null]},"IntersectionTypeAnnotation":{"enter":[null]},"MixedTypeAnnotation":{"enter":[null]},"EmptyTypeAnnotation":{"enter":[null]},"NullableTypeAnnotation":{"enter":[null]},"NumberLiteralTypeAnnotation":{"enter":[null]},"NumberTypeAnnotation":{"enter":[null]},"ObjectTypeAnnotation":{"enter":[null]},"ObjectTypeInternalSlot":{"enter":[null]},"ObjectTypeCallProperty":{"enter":[null]},"ObjectTypeIndexer":{"enter":[null]},"ObjectTypeProperty":{"enter":[null]},"ObjectTypeSpreadProperty":{"enter":[null]},"OpaqueType":{"enter":[null]},"QualifiedTypeIdentifier":{"enter":[null]},"StringLiteralTypeAnnotation":{"enter":[null]},"StringTypeAnnotation":{"enter":[null]},"ThisTypeAnnotation":{"enter":[null]},"TupleTypeAnnotation":{"enter":[null]},"TypeofTypeAnnotation":{"enter":[null]},"TypeAlias":{"enter":[null]},"TypeAnnotation":{"enter":[null]},"TypeParameter":{"enter":[null]},"TypeParameterDeclaration":{"enter":[null]},"TypeParameterInstantiation":{"enter":[null]},"UnionTypeAnnotation":{"enter":[null]},"Variance":{"enter":[null]},"VoidTypeAnnotation":{"enter":[null]},"ExportAllDeclaration":{"enter":[null]},"ExportDefaultDeclaration":{"enter":[null]},"ExportNamedDeclaration":{"enter":[null]}},"options":{}},{"key":"transform-exponentiation-operator","visitor":{"AssignmentExpression":{"enter":[null]},"BinaryExpression":{"enter":[null]},"_exploded":true,"_verified":true},"options":{}},{"key":"regenerator-transform","visitor":{"_exploded":true,"_verified":true,"ObjectMethod":{"enter":[null],"exit":[null]},"ClassMethod":{"enter":[null],"exit":[null]},"ClassPrivateMethod":{"enter":[null],"exit":[null]},"FunctionDeclaration":{"exit":[null]},"FunctionExpression":{"exit":[null]},"ArrowFunctionExpression":{"exit":[null]}},"options":{}}],"presets":[],"generatorOpts":{"filename":"/Users/alexandesigner/Documents/projects/lets/boilerplate/src/imports/ui/pages/Admin/Documents/DocumentsEdit.vue","comments":true,"compact":false,"sourceMaps":true,"sourceFileName":"/Users/alexandesigner/Documents/projects/lets/boilerplate/src/imports/ui/pages/Admin/Documents/DocumentsEdit.vue"}},"code":"var AdminSidebar;\nmodule.link(\"../../../components/Admin/AdminSidebar\", {\n  \"default\": function (v) {\n    AdminSidebar = v;\n  }\n}, 0);\nvar AdminContent;\nmodule.link(\"../../../components/Admin/AdminContent\", {\n  \"default\": function (v) {\n    AdminContent = v;\n  }\n}, 1);\nvar BackButton;\nmodule.link(\"../../../components/BackButton/BackButton\", {\n  \"default\": function (v) {\n    BackButton = v;\n  }\n}, 2);\nvar Documents;\nmodule.link(\"../../../../api/Documents/documents\", {\n  \"default\": function (v) {\n    Documents = v;\n  }\n}, 3);\nvar Images;\nmodule.link(\"../../../../api/Images/images\", {\n  \"default\": function (v) {\n    Images = v;\n  }\n}, 4);\nmodule.exportDefault({\n  name: 'admin-documents-edit',\n  data: function () {\n    return {\n      fullName: '',\n      imageUrl: null,\n      imageFileUpload: null,\n      image: [],\n      editDocument: {\n        owner: '',\n        title: '',\n        subtitle: '',\n        body: '',\n        image: {\n          name: '',\n          type: '',\n          extension: '',\n          path: '',\n          imageId: ''\n        }\n      },\n      rules: {\n        title: [{\n          required: true,\n          message: 'Please input title',\n          trigger: 'blur'\n        }]\n      }\n    };\n  },\n  mounted: function () {\n    $('#DocEdit').froalaEditor({\n      editorClass: 'TextInputEditor',\n      height: 380,\n      placeholderText: 'Start typing something...',\n      toolbarButtons: ['bold', 'italic', 'underline', 'insertLink', 'insertImage', 'embedly', 'formatBlock', 'quote', 'align', 'formatOL', 'formatUL', 'insertHR', 'html'],\n      fileUploadParam: 'file_name',\n      imageMaxSize: 5 * 1024 * 1024,\n      imageAllowedTypes: ['jpeg', 'jpg', 'png']\n    }).on('froalaEditor.image.beforeUpload', function (e, editor, files) {\n      if (files.length) {\n        var reader = new FileReader();\n\n        reader.onload = function (e) {\n          var result = e.target.result;\n          editor.image.insert(result, null, null, editor.image.get());\n        };\n\n        reader.readAsDataURL(files[0]);\n      }\n\n      editor.popups.hideAll();\n      return false;\n    });\n  },\n  watch: {\n    'users': function (user) {\n      var _this = this;\n\n      user.map(function (name) {\n        var fullName = name.profile.firstName + name.profile.lastName;\n        return _this.fullName = fullName;\n      });\n    },\n    'documents': function (doc) {\n      $('#DocEdit').froalaEditor('html.set', doc[0].body);\n      this.$nextTick(function () {\n        this.imageUrl = doc[0].image.path;\n        this.editDocument = {\n          owner: doc[0].owner || '',\n          title: doc[0].title || '',\n          subtitle: doc[0].subtitle || '',\n          body: doc[0].body || '',\n          image: {\n            name: doc[0].image.name || '',\n            type: doc[0].image.type || '',\n            extension: doc[0].image.extension || '',\n            path: doc[0].image.path || '',\n            imageId: doc[0].image.imageId || ''\n          }\n        };\n      });\n    }\n  },\n  computed: {\n    baseUrl: function () {\n      return Meteor.settings.public.BASE_URL;\n    }\n  },\n  methods: {\n    // Form submit\n    handleSubmitForm: function (formName) {\n      var self = this;\n      self.$refs[formName].validate(function (valid) {\n        try {\n          if (valid) {\n            var dataForm = self.editDocument;\n            var doc = self.documents[0];\n            var user = self.users[0];\n            var checkImage = Object.keys(doc.image).length === 0 && doc.image.constructor === Object;\n            var checkUpload = self.imageFileUpload !== null;\n\n            if (checkUpload) {\n              // Create upload instance\n              var uploadInstance = Images.insert({\n                file: self.imageFileUpload.raw,\n                // Get the raw file\n                streams: 'dynamic',\n                chunkSize: 'dynamic',\n                fileName: self.imageFileUpload.name\n              }, false); // When upload status 'end' \n\n              uploadInstance.on('end', function (error, fileObj) {\n                // Check image upload\n                if (error) {\n                  console.log('Error during upload: ' + error.reason);\n                } else {\n                  // Get image path\n                  var imagePath = Images.link(fileObj);\n                  self.image = {\n                    name: fileObj.name,\n                    type: 'document',\n                    extension: fileObj.extension,\n                    path: imagePath,\n                    imageId: fileObj._id\n                  };\n                  console.log('File \"' + fileObj.name + '\" successfully uploaded');\n                } // Send updated data\n\n\n                Meteor.callPromise('Documents.methods.update', {\n                  _id: doc._id,\n                  owner: user._id,\n                  title: dataForm.title,\n                  subtitle: dataForm.subtitle || '',\n                  body: $('#DocEdit').froalaEditor('html.get') || '',\n                  image: {\n                    name: self.image.name,\n                    type: self.image.type,\n                    extension: self.image.extension,\n                    path: self.image.path,\n                    imageId: self.image.imageId\n                  },\n                  updatedAt: new Date()\n                });\n                self.$message({\n                  type: 'info',\n                  message: \"Document update with success!\"\n                });\n                self.$refs[formName].resetFields();\n                self.$router.push({\n                  name: 'admin-documents'\n                });\n              });\n              uploadInstance.start();\n            } else if (checkImage) {\n              Meteor.callPromise('Documents.methods.update', {\n                _id: doc._id,\n                updatedAt: new Date(),\n                owner: user._id,\n                title: dataForm.title,\n                subtitle: dataForm.subtitle,\n                body: $('#DocEdit').froalaEditor('html.get') || '',\n                image: {\n                  name: doc.name,\n                  type: doc.type,\n                  extension: doc.extension,\n                  path: doc.path,\n                  imageId: doc.imageId\n                }\n              });\n              self.$message({\n                type: 'info',\n                message: \"Document update with success!\"\n              });\n              self.$refs[formName].resetFields();\n              self.$router.push({\n                name: 'admin-documents'\n              });\n            } else {\n              // Send updated data\n              Meteor.callPromise('Documents.methods.update', {\n                _id: doc._id,\n                owner: user._id,\n                title: dataForm.title,\n                subtitle: dataForm.subtitle || '',\n                body: $('#DocEdit').froalaEditor('html.get') || '',\n                updatedAt: new Date()\n              });\n              self.$message({\n                type: 'info',\n                message: \"Document update with success!\"\n              });\n              self.$refs[formName].resetFields();\n              self.$router.push({\n                name: 'admin-documents'\n              });\n            }\n          }\n        } catch (error) {\n          self.$message({\n            type: 'error',\n            message: error.error\n          });\n        }\n      });\n    },\n    handleImageSuccess: function (res, file) {\n      this.imageFileUpload = file;\n      this.imageUrl = URL.createObjectURL(file.raw);\n    },\n    beforeImageUpload: function (file) {\n      var isJPG = file.type === 'image/jpeg';\n      var isPNG = file.type === 'image/png';\n      var isLt2M = file.size / 1024 / 1024 < 2;\n\n      if (!isJPG && !isPNG) {\n        this.$message.error('Image must be JPG or PNG format!');\n      }\n\n      if (!isLt2M) {\n        this.$message.error('Image size can not exceed 2MB!');\n      }\n\n      return isJPG || isPNG && isLt2M;\n    }\n  },\n  meteor: {\n    $subscribe: {\n      'documents.owner': []\n    },\n    users: function () {\n      return Meteor.users.find({});\n    },\n    documents: function () {\n      return Documents.find({\n        _id: this.$route.params.documentId\n      });\n    }\n  },\n  components: {\n    AdminSidebar: AdminSidebar,\n    AdminContent: AdminContent,\n    BackButton: BackButton\n  }\n});","map":{"version":3,"sources":["/Users/alexandesigner/Documents/projects/lets/boilerplate/src/imports/ui/pages/Admin/Documents/DocumentsEdit.vue"],"names":["AdminSidebar","module","link","v","AdminContent","BackButton","Documents","Images","exportDefault","name","data","fullName","imageUrl","imageFileUpload","image","editDocument","owner","title","subtitle","body","type","extension","path","imageId","rules","required","message","trigger","mounted","$","froalaEditor","editorClass","height","placeholderText","toolbarButtons","fileUploadParam","imageMaxSize","imageAllowedTypes","on","e","editor","files","length","reader","FileReader","onload","result","target","insert","get","readAsDataURL","popups","hideAll","watch","user","map","profile","firstName","lastName","doc","$nextTick","computed","baseUrl","Meteor","settings","public","BASE_URL","methods","handleSubmitForm","formName","self","$refs","validate","valid","dataForm","documents","users","checkImage","Object","keys","constructor","checkUpload","uploadInstance","file","raw","streams","chunkSize","fileName","error","fileObj","console","log","reason","imagePath","_id","callPromise","updatedAt","Date","$message","resetFields","$router","push","start","handleImageSuccess","res","URL","createObjectURL","beforeImageUpload","isJPG","isPNG","isLt2M","size","meteor","$subscribe","find","$route","params","documentId","components"],"mappings":"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","sourcesContent":["\n\n// Components\nimport AdminSidebar from '../../../components/Admin/AdminSidebar'\nimport AdminContent from '../../../components/Admin/AdminContent'\nimport BackButton from '../../../components/BackButton/BackButton'\n// Collections\nimport Documents from '../../../../api/Documents/documents'\nimport Images from '../../../../api/Images/images'\n\nexport default {\n  name: 'admin-documents-edit',\n  data: () => ({\n    fullName: '',\n    imageUrl: null,\n    imageFileUpload: null,\n    image: [],\n    editDocument: {\n      owner: '',\n      title: '',\n      subtitle: '',\n      body: '',\n      image: {\n        name: '',\n        type: '',\n        extension: '',\n        path: '',\n        imageId: ''\n      }\n    },\n    rules: {\n      title: [\n        { required: true, message: 'Please input title', trigger: 'blur' },\n      ]\n    },\n  }),\n  mounted () {\n    $('#DocEdit').froalaEditor({\n      editorClass: 'TextInputEditor',\n      height: 380,\n      placeholderText: 'Start typing something...',\n      toolbarButtons: [\n        'bold',\n        'italic',\n        'underline',\n        'insertLink',\n        'insertImage',\n        'embedly',\n        'formatBlock',\n        'quote',\n        'align',\n        'formatOL',\n        'formatUL',\n        'insertHR',\n        'html'\n      ],\n      fileUploadParam: 'file_name',\n      imageMaxSize: 5 * 1024 * 1024,\n      imageAllowedTypes: ['jpeg', 'jpg', 'png']\n    }).on('froalaEditor.image.beforeUpload', function (e, editor, files) {\n      if (files.length) {\n        let reader = new FileReader()\n        reader.onload = function (e) {\n          let result = e.target.result\n          editor.image.insert(result, null, null, editor.image.get())\n        }\n        reader.readAsDataURL(files[0])\n      }\n      editor.popups.hideAll()\n      return false\n    })\n  },\n  watch: {\n    'users': function (user) {\n      user.map(name => {\n        const fullName = name.profile.firstName + name.profile.lastName\n        return this.fullName = fullName\n      })\n    },\n    'documents': function(doc) {\n      $('#DocEdit').froalaEditor('html.set', doc[0].body)\n      this.$nextTick(function() {\n        this.imageUrl = doc[0].image.path\n        this.editDocument = {\n          owner: doc[0].owner || '',\n          title: doc[0].title || '',\n          subtitle: doc[0].subtitle || '',\n          body: doc[0].body || '',\n          image: {\n            name: doc[0].image.name || '',\n            type: doc[0].image.type || '',\n            extension: doc[0].image.extension || '',\n            path: doc[0].image.path || '',\n            imageId: doc[0].image.imageId || ''\n          }\n        }\n      })\n    }\n  },\n  computed: {\n    baseUrl () {\n      return Meteor.settings.public.BASE_URL\n    }\n  },\n  methods: {\n    // Form submit\n    handleSubmitForm (formName) {\n\n      let self = this\n\n      self.$refs[formName].validate((valid) => {\n        try {\n          if (valid) {\n\n            let dataForm = self.editDocument\n            let doc = self.documents[0]\n            let user = self.users[0]\n            let checkImage = Object.keys(doc.image).length === 0 && doc.image.constructor === Object \n            let checkUpload = self.imageFileUpload !== null\n\n            if (checkUpload) {\n              // Create upload instance\n              let uploadInstance = Images.insert({\n                file: self.imageFileUpload.raw, // Get the raw file\n                streams: 'dynamic',\n                chunkSize: 'dynamic',\n                fileName: self.imageFileUpload.name\n              }, false)\n\n              // When upload status 'end' \n              uploadInstance.on('end', function(error, fileObj) {\n                \n                // Check image upload\n                if (error) {\n                  console.log('Error during upload: ' + error.reason)\n                } else {\n                  // Get image path\n                  let imagePath = Images.link(fileObj)\n                  self.image = {\n                    name: fileObj.name,\n                    type: 'document',\n                    extension: fileObj.extension,\n                    path: imagePath,\n                    imageId: fileObj._id\n                  }\n                  console.log('File \"' + fileObj.name + '\" successfully uploaded')\n                }\n\n                // Send updated data\n                Meteor.callPromise('Documents.methods.update', {\n                  _id: doc._id,\n                  owner: user._id,\n                  title: dataForm.title,\n                  subtitle: dataForm.subtitle || '',\n                  body: $('#DocEdit').froalaEditor('html.get') || '',\n                  image: {\n                    name: self.image.name,\n                    type: self.image.type,\n                    extension: self.image.extension,\n                    path: self.image.path,\n                    imageId: self.image.imageId\n                  },\n                  updatedAt: new Date()\n                })\n                self.$message({\n                  type: 'info',\n                  message: `Document update with success!`\n                })\n                self.$refs[formName].resetFields()\n                self.$router.push({ name: 'admin-documents' })\n              })\n              \n              uploadInstance.start()\n\n            } else if (checkImage) {\n              Meteor.callPromise('Documents.methods.update', {\n                _id: doc._id,\n                updatedAt: new Date(),\n                owner: user._id,\n                title: dataForm.title,\n                subtitle: dataForm.subtitle,\n                body: $('#DocEdit').froalaEditor('html.get') || '',\n                image: {\n                  name: doc.name,\n                  type: doc.type,\n                  extension: doc.extension,\n                  path: doc.path,\n                  imageId: doc.imageId\n                }\n              })\n              self.$message({\n                type: 'info',\n                message: `Document update with success!`\n              })\n              self.$refs[formName].resetFields()\n              self.$router.push({ name: 'admin-documents' })\n            } else {\n              // Send updated data\n              Meteor.callPromise('Documents.methods.update', {\n                _id: doc._id,\n                owner: user._id,\n                title: dataForm.title,\n                subtitle: dataForm.subtitle || '',\n                body: $('#DocEdit').froalaEditor('html.get') || '',\n                updatedAt: new Date()\n              })\n              self.$message({\n                type: 'info',\n                message: `Document update with success!`\n              })\n              self.$refs[formName].resetFields()\n              self.$router.push({ name: 'admin-documents' })\n            }\n          }\n        } catch (error) {\n          self.$message({\n            type: 'error',\n            message: error.error\n          })\n        }\n      })\n    },\n    handleImageSuccess(res, file) {\n      this.imageFileUpload = file\n      this.imageUrl = URL.createObjectURL(file.raw)\n    },\n    beforeImageUpload(file) {\n      const isJPG = file.type === 'image/jpeg'\n      const isPNG = file.type === 'image/png'\n      const isLt2M = file.size / 1024 / 1024 < 2\n\n      if (!isJPG && !isPNG) {\n        this.$message.error('Image must be JPG or PNG format!')\n      }\n      if (!isLt2M) {\n        this.$message.error('Image size can not exceed 2MB!')\n      }\n      return isJPG || isPNG && isLt2M\n    }\n  },\n  meteor: {\n    $subscribe: {\n      'documents.owner': []\n    },\n    users() {\n      return Meteor.users.find({})\n    },\n    documents() {\n      return Documents.find({\n        _id: this.$route.params.documentId\n      })\n    }\n  },\n  components: {\n    AdminSidebar,\n    AdminContent,\n    BackButton\n  }\n}\n"]},"sourceType":"module","hash":"4e404c7de08bf710013f45d7ffbaa67a46fc021c"}
